name: Release Manager

on:
  workflow_call:
    inputs:
      new_version:
        required: true
        type: string
        description: "Version to release"
      should_release_jira_version:
        required: false
        type: boolean
        default: true
      should_create_github_release:
        required: false
        type: boolean
        default: false
    secrets:
      JIRA_EMAIL:
        required: true
      JIRA_TOKEN:
        required: true
      WORKFLOW:
        required: true

jobs:
  manage-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      JIRA_BASE_URL: https://iamdima.atlassian.net
      JIRA_PROJECT_KEY: IT
      JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
      JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - name: Release version in Jira
        if: inputs.should_release_jira_version == true
        run: |
          echo "Releasing version in Jira..."
          echo "Version to release: ${{ inputs.new_version }}"

          VERSION_TO_RELEASE="${{ inputs.new_version }}"

          # Get the version ID for the specific version
          VERSIONS=$(curl -s -u $JIRA_EMAIL:$JIRA_TOKEN -X GET "$JIRA_BASE_URL/rest/api/3/project/$JIRA_PROJECT_KEY/versions")
          VERSION_ID=$(echo "$VERSIONS" | jq -r --arg NAME "$VERSION_TO_RELEASE" '.[] | select(.name == $NAME) | .id' || echo "")

          if [ -n "$VERSION_ID" ]; then
            echo "Found version $VERSION_TO_RELEASE (ID: $VERSION_ID), marking as released."

            TODAY=$(date +%Y-%m-%d)

            curl -s -u $JIRA_EMAIL:$JIRA_TOKEN \
              -X PUT "$JIRA_BASE_URL/rest/api/3/version/$VERSION_ID" \
              -H "Content-Type: application/json" \
              -d "{
                \"released\": true,
                \"releaseDate\": \"$TODAY\"
              }"
            
            echo "✅ Successfully released version $VERSION_TO_RELEASE"

            # Get all issues assigned to this version
            echo "Getting issues assigned to version $VERSION_TO_RELEASE..."
            ISSUES=$(curl -s -u $JIRA_EMAIL:$JIRA_TOKEN -X GET "$JIRA_BASE_URL/rest/api/3/search?jql=fixVersion=$VERSION_TO_RELEASE&fields=key,status")

            if [ $? -eq 0 ] && [ "$(echo "$ISSUES" | jq -r '.issues | length')" -gt 0 ]; then
              echo "Found $(echo "$ISSUES" | jq -r '.issues | length') issues assigned to this version"

              echo "Getting available statuses..."
              STATUSES=$(curl -s -u $JIRA_EMAIL:$JIRA_TOKEN -X GET "$JIRA_BASE_URL/rest/api/3/status")
              DONE_STATUS_ID=$(echo "$STATUSES" | jq -r '.[] | select(.name == "Done") | .id' || echo "")
              
              if [ -z "$DONE_STATUS_ID" ]; then
                echo "⚠️  Could not find 'Done' status, trying alternative names..."
                DONE_STATUS_ID=$(echo "$STATUSES" | jq -r '.[] | select(.name | test("done|complete|finished|resolved"; "i")) | .id' | head -1 || echo "")
              fi

              if [ -n "$DONE_STATUS_ID" ]; then
                echo "Using status ID: $DONE_STATUS_ID for transitioning issues to Done"

                echo "$ISSUES" | jq -r '.issues[] | .key' | while read -r ISSUE_KEY; do
                  if [ -n "$ISSUE_KEY" ]; then
                    echo "Processing issue: $ISSUE_KEY"
                    
                    ISSUE_DATA=$(curl -s -u $JIRA_EMAIL:$JIRA_TOKEN -X GET "$JIRA_BASE_URL/rest/api/3/issue/$ISSUE_KEY?fields=status")
                    CURRENT_STATUS=$(echo "$ISSUE_DATA" | jq -r '.fields.status.name')
                    
                    echo "Current status of $ISSUE_KEY: $CURRENT_STATUS"
                    
                    if [ "$CURRENT_STATUS" != "Done" ] && [ "$CURRENT_STATUS" != "done" ]; then
                      # Get available transitions for this issue
                      TRANSITIONS=$(curl -s -u $JIRA_EMAIL:$JIRA_TOKEN -X GET "$JIRA_BASE_URL/rest/api/3/issue/$ISSUE_KEY/transitions")
                      
                      TRANSITION_ID=$(echo "$TRANSITIONS" | jq -r --arg TARGET_ID "$DONE_STATUS_ID" '.transitions[] | select(.to.id == $TARGET_ID) | .id' | head -1)
                      
                      if [ -n "$TRANSITION_ID" ] && [ "$TRANSITION_ID" != "null" ]; then
                        echo "Transitioning $ISSUE_KEY to Done (transition ID: $TRANSITION_ID)"
                        
                        TRANSITION_RESULT=$(curl -s -u $JIRA_EMAIL:$JIRA_TOKEN \
                          -X POST "$JIRA_BASE_URL/rest/api/3/issue/$ISSUE_KEY/transitions" \
                          -H "Content-Type: application/json" \
                          -d "{
                            \"transition\": {
                              \"id\": \"$TRANSITION_ID\"
                            }
                          }")
                        
                        if [ $? -eq 0 ]; then
                          echo "✅ Successfully transitioned $ISSUE_KEY to Done"
                        else
                          echo "❌ Failed to transition $ISSUE_KEY to Done"
                        fi
                      else
                        echo "⚠️  No valid transition found for $ISSUE_KEY to Done status"
                      fi
                    else
                      echo "ℹ️  Issue $ISSUE_KEY is already in Done status, skipping"
                    fi
                  fi
                done
              else
                echo "❌ Could not find appropriate 'Done' status. Available statuses:"
                echo "$STATUSES" | jq -r '.[] | .name' | head -10
              fi
            else
              echo "ℹ️  No issues found assigned to version $VERSION_TO_RELEASE"
            fi
          else
            echo "❌ Version $VERSION_TO_RELEASE not found in Jira. Available versions:"
            echo "$VERSIONS" | jq -r '.[] | select(.released == false) | .name' || echo "No unreleased versions found"
            exit 1
          fi

      - name: Create GitHub Tag
        if: inputs.should_create_github_release == true
        run: |
          echo "Creating GitHub tag..."

          TAG_NAME="${{ inputs.new_version }}"

          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          git tag $TAG_NAME
          PUSH_OUTPUT=$(git push origin $TAG_NAME 2>&1)
          PUSH_EXIT_CODE=$?

          if [ $PUSH_EXIT_CODE -eq 0 ]; then
            echo "✅ Tag push successful"
          elif echo "$PUSH_OUTPUT" | grep -q "Already up to date"; then
            echo "✅ Tag already exists - push skipped"
          else
            echo "❌ Tag push failed: $PUSH_OUTPUT"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create GitHub Release
        if: inputs.should_create_github_release == true
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.WORKFLOW }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{
              "tag_name": "${{ inputs.new_version }}",
              "name": "Release ${{ inputs.new_version }}",
              "body": "Automated release based on Jira version ${{ inputs.new_version }} (Generated by CI)",
              "draft": false,
              "prerelease": false
            }'
