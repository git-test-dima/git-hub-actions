name: Release Manager

on:
  workflow_call:
    inputs:
      new_version:
        required: true
        type: string
        description: "Version to release"
      should_release_jira_version:
        required: false
        type: boolean
        default: true
      should_create_github_release:
        required: false
        type: boolean
        default: false
    secrets:
      JIRA_EMAIL:
        required: true
      JIRA_TOKEN:
        required: true
      WORKFLOW:
        required: true

jobs:
  manage-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      JIRA_BASE_URL: https://iamdima.atlassian.net
      JIRA_PROJECT_KEY: IT
      JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
      JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - name: Release version in Jira
        if: inputs.should_release_jira_version == true
        run: |
          echo "Releasing version in Jira..."
          echo "Version to release: ${{ inputs.new_version }}"

          VERSION_TO_RELEASE="${{ inputs.new_version }}"

          # Get the version ID for the specific version
          VERSIONS=$(curl -s -u $JIRA_EMAIL:$JIRA_TOKEN -X GET "$JIRA_BASE_URL/rest/api/3/project/$JIRA_PROJECT_KEY/versions")
          VERSION_ID=$(echo "$VERSIONS" | jq -r --arg NAME "$VERSION_TO_RELEASE" '.[] | select(.name == $NAME) | .id' || echo "")

          if [ -n "$VERSION_ID" ]; then
            echo "Found version $VERSION_TO_RELEASE (ID: $VERSION_ID), marking as released."

            TODAY=$(date +%Y-%m-%d)

            curl -s -u $JIRA_EMAIL:$JIRA_TOKEN \
              -X PUT "$JIRA_BASE_URL/rest/api/3/version/$VERSION_ID" \
              -H "Content-Type: application/json" \
              -d "{
                \"released\": true,
                \"releaseDate\": \"$TODAY\"
              }"
            
            echo "✅ Successfully released version $VERSION_TO_RELEASE"
          else
            echo "❌ Version $VERSION_TO_RELEASE not found in Jira. Available versions:"
            echo "$VERSIONS" | jq -r '.[] | select(.released == false) | .name' || echo "No unreleased versions found"
            exit 1
          fi

      - name: Create GitHub Tag
        if: inputs.should_create_github_release == true
        run: |
          echo "Creating GitHub tag..."

          TAG_NAME="${{ inputs.new_version }}"

          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          git tag $TAG_NAME
          PUSH_OUTPUT=$(git push origin $TAG_NAME 2>&1)
          PUSH_EXIT_CODE=$?

          if [ $PUSH_EXIT_CODE -eq 0 ]; then
            echo "✅ Tag push successful"
          elif echo "$PUSH_OUTPUT" | grep -q "Already up to date"; then
            echo "✅ Tag already exists - push skipped"
          else
            echo "❌ Tag push failed: $PUSH_OUTPUT"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create GitHub Release
        if: inputs.should_create_github_release == true
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.WORKFLOW }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{
              "tag_name": "${{ inputs.new_version }}",
              "name": "Release ${{ inputs.new_version }}",
              "body": "Automated release based on Jira version ${{ inputs.new_version }} (Generated by CI)",
              "draft": false,
              "prerelease": false
            }'
