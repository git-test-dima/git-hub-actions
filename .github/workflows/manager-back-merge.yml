name: Back Merge Manager

on:
  workflow_call:
    inputs:
      back_merge_targets:
        required: true
        type: string
        description: "Comma-separated list of target branches for back-merge"
    secrets:
      WORKFLOW:
        required: true

jobs:
  perform-back-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Prepare back-merge
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW }}

      - name: Perform back-merge
        run: |
          set -eo pipefail

          echo "üîß Configuring Git user"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "üîë Setting up authentication"
          git remote set-url origin https://x-access-token:${{ secrets.WORKFLOW }}@github.com/${{ github.repository }}

          echo "üîç Testing authentication..."
          git ls-remote --heads origin > /dev/null || { echo "‚ùå Authentication failed"; exit 1; }
          echo "‚úÖ Authentication successful"

          echo "üì• Fetching all branches"
          git fetch --all --prune

          IFS=',' read -ra TARGETS <<< "${{ inputs.back_merge_targets }}"
          for target in "${TARGETS[@]}"; do
            echo "üì• Fetching target branch: $target"
            git fetch origin $target:$target || echo "‚ö†Ô∏è No remote $target branch"
          done

          echo "üîç Current branch: ${{ github.ref_name }}"

          for target in "${TARGETS[@]}"; do
            echo "üöÄ Merging ${{ github.ref_name }} into $target"
            git checkout $target
            MERGE_OUTPUT=$(git merge ${{ github.ref_name }} --no-ff --no-commit 2>&1)
            MERGE_EXIT_CODE=$?
            
            if [ $MERGE_EXIT_CODE -eq 0 ]; then
              echo "‚úÖ Merge successful"
              git commit -m "üîÑ Back-merge ${{ github.ref_name }} into $target"
              git push origin $target
            elif echo "$MERGE_OUTPUT" | grep -q "Already up to date"; then
              echo "‚úÖ Already up to date - skipping merge"
            else
              echo "‚ùå Merge conflict detected! Aborting..."
              echo "Merge output: $MERGE_OUTPUT"
              git merge --abort
              exit 1
            fi
          done
