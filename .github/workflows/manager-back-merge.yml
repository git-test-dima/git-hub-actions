name: Back Merge Manager

on:
  workflow_call:
    inputs:
      back_merge_targets:
        required: true
        type: string
        description: "Comma-separated list of target branches for back-merge"
    secrets:
      WORKFLOW:
        required: true

jobs:
  perform-back-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Prepare back-merge
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW }}

      - name: Perform back-merge
        run: |
          set -eo pipefail

          echo "🔧 Configuring Git user"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "🔑 Setting up authentication"
          git remote set-url origin https://x-access-token:${{ secrets.WORKFLOW }}@github.com/${{ github.repository }}

          echo "🔍 Testing authentication..."
          git ls-remote --heads origin > /dev/null || { echo "❌ Authentication failed"; exit 1; }
          echo "✅ Authentication successful"

          echo "📥 Fetching all branches"
          git fetch --all --prune

          echo "🧹 Ensuring clean working directory"
          git reset --hard HEAD
          git clean -fd

          IFS=',' read -ra TARGETS <<< "${{ inputs.back_merge_targets }}"
          for target in "${TARGETS[@]}"; do
            echo "📥 Fetching target branch: $target"
            git fetch origin $target:$target || echo "⚠️ No remote $target branch"
          done

          echo "🔍 Current branch: ${{ github.ref_name }}"
          echo "📋 Available branches:"
          git branch -a

          # Verify source branch exists
          if ! git show-ref --verify --quiet refs/heads/${{ github.ref_name }}; then
            echo "❌ Source branch '${{ github.ref_name }}' does not exist locally"
            exit 1
          fi
          echo "✅ Source branch '${{ github.ref_name }}' exists locally"

          for target in "${TARGETS[@]}"; do
            echo "🚀 Merging ${{ github.ref_name }} into $target"
            
            # Check if target branch exists
            if ! git show-ref --verify --quiet refs/heads/$target; then
              echo "❌ Target branch '$target' does not exist locally"
              echo "📥 Trying to fetch it from remote..."
              git fetch origin $target:$target || {
                echo "❌ Failed to fetch target branch '$target' from remote"
                echo "🔍 Available remote branches:"
                git ls-remote --heads origin
                exit 1
              }
            fi
            
            echo "✅ Target branch '$target' exists locally"
            
            echo "🔄 Switching to target branch: $target"
            # Clean any uncommitted changes that might prevent checkout
            git reset --hard HEAD
            git clean -fd
            git checkout $target || {
              echo "❌ Failed to checkout target branch '$target'"
              echo "🔍 Checking available branches:"
              git branch -a
              echo "🔍 Checking current status:"
              git status
              exit 1
            }
            
            echo "🔀 Attempting merge..."
            MERGE_OUTPUT=$(git merge ${{ github.ref_name }} --no-ff --no-commit 2>&1)
            MERGE_EXIT_CODE=$?
            
            echo "📝 Merge output: $MERGE_OUTPUT"
            echo "🔢 Merge exit code: $MERGE_EXIT_CODE"
            
            if [ $MERGE_EXIT_CODE -eq 0 ]; then
              if echo "$MERGE_OUTPUT" | grep -q "Already up to date"; then
                echo "✅ Already up to date - no conflicts, job completed successfully"
              else
                echo "✅ Merge successful"
                git commit -m "🔄 Back-merge ${{ github.ref_name }} into $target"
                echo "📤 Pushing to remote..."
                git push origin $target || {
                  echo "❌ Failed to push to remote. This might be due to:"
                  echo "   - Branch protection rules"
                  echo "   - Insufficient permissions"
                  echo "   - Network issues"
                  exit 1
                }
                echo "✅ Push successful"
              fi
            else
              echo "❌ Merge conflict detected! Aborting..."
              echo "Merge output: $MERGE_OUTPUT"
              git merge --abort
              echo "🔍 Checking for conflicts..."
              git status
              exit 1
            fi
          done
